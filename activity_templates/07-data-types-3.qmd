---
title: "Wrangling: factors"
sidebar: false
---

```{r message=FALSE, echo=FALSE}
library(tidyverse) # The stringr and forcats packages are part of tidyverse
```

# Learning goals

After this lesson, you should be able to:

- Recode and manage factors using the `forcats` package

<br>

You can download a template Quarto file to start from [here](activity_templates/07-data-types-3.qmd). Save this template within the following directory structure:

- `your_course_folder`
    - `wrangling_data_types`
        - `code`
            - `05-data-types-1.qmd`
            - `06-data-types-2.qmd`
            - `07-data-types-3.qmd`

<br><br><br>


# Factors

## Creating factors

In R, factors are made up of two components: the **actual values** of the data and the possible **levels** within the factor. Creating a factor requires supplying both pieces of information.

```{r}
months <- c("Mar", "Dec", "Jan",  "Apr", "Jul")
```

However, if we were to sort this vector, R would sort this vector alphabetically.

```{r}
# alphabetical sort
sort(months)
```

We can fix this sorting by creating a factor version of `months`. The `levels` argument is a character vector that specifies the unique values that the factor can take. The order of the values in `levels` defines the sorting of the factor.

```{r}
months_fct <- factor(months, levels = month.abb) # month.abb is a built-in variable
months_fct
sort(months_fct)
```

What if we try to create a factor with values that aren't in the levels? (e.g., a typo in a month name)

```{r}
months2 <- c("Jna", "Mar")
factor(months2, levels = month.abb)
```

Because the `NA` is introduced silently (without any error or warnings), this can be dangerous. It might be better to use the `fct()` function in the `forcats` package instead:

```{r error=TRUE}
fct(months2, levels = month.abb)
```

**Exercise:** Create a factor version of the following data with the levels in a sensible order.

```{r}
ratings <- c("High", "Medium", "Low")
```

In the remainder of the exercises and examples, we'll use a subset of the General Social Survey (GSS) dataset available in the `forcats` pacakges.

```{r}
data(gss_cat)
```

## Reordering factors

Reordering the levels of a factor can be useful in plotting when categories would benefit from being sorted in a particular way:

```{r}
relig_summary <- gss_cat %>%
    group_by(relig) %>%
    summarize(
        tvhours = mean(tvhours, na.rm = TRUE),
        n = n()
    )

ggplot(relig_summary, aes(x = tvhours, y = relig)) + 
    geom_point() +
    theme_classic()
```

We can use `fct_reorder()` in `forcats`.

- The first argument is the factor that you want to reorder the levels of
- The second argument determines how the factor is sorted (analogous to what you put inside `arrange()` when sorting the rows of a data frame.)

```{r}
ggplot(relig_summary, aes(x = tvhours, y = fct_reorder(relig, tvhours))) +
    geom_point() +
    theme_classic()
```

For bar plots, we can use `fct_infreq()` to reorder levels from most to least common. This can be combined with `fct_rev()` to reverse the order (least to most common):

```{r}
gss_cat %>%
    ggplot(aes(x = marital)) +
    geom_bar() +
    theme_classic()

gss_cat %>%
    mutate(marital = marital %>% fct_infreq() %>% fct_rev()) %>%
    ggplot(aes(x = marital)) +
    geom_bar() +
    theme_classic()
```

## Modifying factor levels

We talked about reordering the levels of a factor--what about changing the values of the levels themselves?

For example, the names of the political parties in the GSS could use elaboration ("str" isn't a great label for "strong") and clean up:

```{r}
gss_cat %>% count(partyid)
```

We can use `fct_recode()` on `partyid` with the new level names going on the left and the old levels on the right. Any levels that aren't mentioned explicitly (i.e., "Don't know" and "Other party") will be left as is:

```{r}
gss_cat %>%
    mutate(
        partyid = fct_recode(partyid,
            "Republican, strong"    = "Strong republican",
            "Republican, weak"      = "Not str republican",
            "Independent, near rep" = "Ind,near rep",
            "Independent, near dem" = "Ind,near dem",
            "Democrat, weak"        = "Not str democrat",
            "Democrat, strong"      = "Strong democrat"
        )
    ) %>%
    count(partyid)
```

To combine groups, we can assign multiple old levels to the same new level ("Other" maps to "No answer", "Don't know", and "Other party"):

```{r}
gss_cat %>%
    mutate(
        partyid = fct_recode(partyid,
            "Republican, strong"    = "Strong republican",
            "Republican, weak"      = "Not str republican",
            "Independent, near rep" = "Ind,near rep",
            "Independent, near dem" = "Ind,near dem",
            "Democrat, weak"        = "Not str democrat",
            "Democrat, strong"      = "Strong democrat",
            "Other"                 = "No answer",
            "Other"                 = "Don't know",
            "Other"                 = "Other party"
        )
    )
```

We can use `fct_collapse()` to collapse many levels:

```{r}
gss_cat %>%
    mutate(
        partyid = fct_collapse(partyid,
            "Other" = c("No answer", "Don't know", "Other party"),
            "Republican" = c("Strong republican", "Not str republican"),
            "Independent" = c("Ind,near rep", "Independent", "Ind,near dem"),
            "Democrat" = c("Not str democrat", "Strong democrat")
        )
    ) %>%
    count(partyid)
```

**Exercises:** Using the `gss_cat` dataset, try the following:

- Make a plot that shows the relationship between marital status (`marital`) and `age` in a way that makes a trend clear.
- Make a plot that shows the relationship between religion followed (`relig`) and income `rincome`. Combine income categories for better readability.


<br><br><br>


# Project work time

Get together with your tentative project teammates.

1. If you are satisfied with your team composition, fill in your team details on this [Google Doc](https://docs.google.com/document/d/1BwgKdFXdWeaOiaDB-OGRcBhXM36qTIo79BmYZ9hvxko/edit?usp=sharing).
2. If you would like to continue searching for a team, you can do so today. Look through the Google Doc linked above as it's being filled out to get a sense for what team you'd like to join.

If you have already located a dataset relevant to one or more of your research questions and can read it into R, start to explore that data in working towards [Project Milestone 2](project.qmd#milestone-2).

Otherwise, peruse the [Tidy Tuesday](https://github.com/rfordatascience/tidytuesday) GitHub repository to find a dataset that is roughly (perhaps very roughly) related to your project domain. Start exploring this data in working towards [Project Milestone 2](project.qmd#milestone-2).

- **Why am I suggesting Tidy Tuesday?** Sometimes data that aren't perfectly aligned with our interests can still give useful context. Being able to provide meaning from "imperfect" data is a very useful skill because imperfect data are so common.













