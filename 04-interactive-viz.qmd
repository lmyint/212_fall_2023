---
title: "Topic 4: Interactive visualization"
---

# Learning goals

After this lesson, you should be able to:

- Evaluate when it would be useful to use an interactive visualization or an animation and when it might not be necessary
- Construct interactive visualizations and animations with `plotly`
- Build a Shiny app that enables user to adjust visualization choices and explore linked visualizations



# Motivation: recreating an interactive visualization app

[This interactive application](https://walkerke.shinyapps.io/neighborhood_diversity/) made by Kyle Walker allows exploration of neighborhood diversity across time and space. It showcases major packages and features of interactive visualization. Our goal is to recreate this app from scratch.

## Pair "programming" exercise

Catalog the app's **layout** and **interactivity features** as part of the app planning phase.

- **Navigator**: Open up the [neighborhood diversity app](https://walkerke.shinyapps.io/neighborhood_diversity/) for reference. The Navigator should explore the interactive features of the app and help the Driver sketch out a schematic of the app.

- **Driver:** On a sheet of paper, sketch the layout and general features of the app as the Navigator navigates. Draw arrows to indicate what parts of the app update in response to user input. Your sketch might start off looking like this:

![](images/04_example_schematic.png)

::: {.callout-tip collapse="false"}
## Stop to Reflect

How has pair programming become easier and harder? 

What do you need from your partner and what does your partner need from you?

:::

# Background

## Why use interactivity?

Pros

- Can explore peculiarities more quickly with linked representations
- Allows guided exploration of results without needing to share data

Cons

- Takes longer to design
- Analyst might spend longer exploring an interactive visualization than a series of static visualizations
- Poor design could result in information overload

## Common features of interactive visualizations

Common features of interactive visualizations include ([reference](https://link.springer.com/chapter/10.1007/978-3-030-56146-8_3)):

- Changing data representation: providing options to change the type of plot displayed (e.g., allowing users to visualize temperature patterns over a month vs. over years)
- Focusing and getting details: mousing over part of a visualization to see an exact data value, zooming and panning
- Data transformation: e.g., changing color scale, switching to/from log scale
- Data selection and filtering: highlighting and brushing regions of a plot to focus the selected points; reordering and filtering data show in tables
- Finding corresponding information in multiple views: linked views that update dynamically based on interaction in another plot (often by zooming, panning, or selecting certain points)

## Shiny

The neighborhood diversity app was made with the Shiny toolkit available in the `shiny` R package. Shiny facilitates building interactive web applications using R code without needing extensive knowledge of web coding technologies (e.g., HTML, CSS, and Javascript).

Let's look at an example app together. RStudio will create a template app when you go to File \> New File \> Shiny Web App. The **application name** can be `neighborhood_diversity`, and the **application type** can stay as the default "Single file (app.R)". This creates a folder in your current directory called `neighborhood_diversity` with a single R code file called `app.R`.

Click the Run App button to view the app in action.

The `app.R` has three components:

- a user interface object (`ui`): this sets up the layout of the app
- a server function (`server`): this defines how the app will react to user input
- a call to the `shinyApp()` function: this launches the app

### Building the user interface (UI)

The first step in building a Shiny application is to set up the layout, or the User Interface (UI).

Open up the [Shiny cheatsheet](https://rstudio.github.io/cheatsheets/shiny.pdf), and look at the Layouts section on the right side of the second page. Which layout pieces can we use to recreate the [neighborhood diversity app](https://walkerke.shinyapps.io/neighborhood_diversity/)?







::: {.callout-tip collapse="false"}
## Stop to Reflect

How do you learn best, without getting overwhelmed? Consider approaches that have worked for you and discuss with your partner. Notice similarities and differences in how you learn best.  

:::



# Various notes

Examples of Shiny apps

- https://walkerke.shinyapps.io/neighborhood_diversity/
- Might also be fun to look at Macalester data for the dashboard
- https://github.com/grabear/awesome-rshiny

Reading resources on Shiny and Plotly

- https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html
- https://github.com/rstudio/shiny-examples
- https://plotly-r.com/index.html

## The `plotly` package

```{r}
library(plotly)
```

One use case:

```{r}
data(babynames, package = "babynames")
bnames <- babynames %>% filter(name %in% c("Leslie", "Margaux"))
p <- ggplot(bnames, aes(x = year, y = prop, color = sex, linetype = name)) +
    geom_line()
# ggplotly(p)
```

Another use case: animate

```{r}
data(gapminder, package = "gapminder")
p <- ggplot(gapminder, aes(gdpPercap, lifeExp, color = continent)) +
    geom_point(aes(size = pop, frame = year, ids = country)) +
    scale_x_log10() +
    theme_classic()
# ggplotly(p)
```

## Ideas

Teach students about the `flexdashboard` package (https://pkgs.rstudio.com/flexdashboard/index.html). (Maybe put this as homework?)

-   https://epirhandbook.com/en/dashboards-with-r-markdown.html
-   [Paper on dashboard design patterns](https://arxiv.org/pdf/2205.00757.pdf) and https://dashboarddesignpatterns.github.io/
-   https://www.datapine.com/blog/dashboard-design-principles-and-best-practices/#dashboard-design-best-practices (Googled "theory of dashboard design")

Teach students about plotly and shiny--does flexdashboard intersect with plotly and/or shiny?

The [Novel Coronavirus Research Compendium (NCRC)](https://ncrc.jhsph.edu/): triage system was built with Shiny. (Slides on the process: https://jscholarship.library.jhu.edu/bitstream/handle/1774.2/62834/2020%20JHAllLibrariesLobner.pdf?sequence=1). I can't seem to find the actual Shiny app.



## Theory of dashboard design

Lead-in activity

-   Show an example of two dashboards (or more) and have them compare the dashboards
-   Or maybe a single interface that is familiar to them
    -   School-related possibilities: Moodle, DegreeWorks, 1600Grand
    -   Mobile app
    -   Xcel energy
-   Split students into groups where some groups look at a multipage PDF of visualizations--arising from the same plot on different subsets of data. The other group gets to look at an interactive visualization.

![](https://www.datapine.com/blog/wp-content/uploads/2023/04/25-dashboard-design-tips.png)

1.  Consider your audience
    -   Who will be using the dashboard and what information do they need?
2.  Determine your goals
3.  Choose relevant metrics to display
4.  Tell a story with your data
5.  Provide context
