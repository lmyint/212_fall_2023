---
title: "Loops and iteration"
sidebar: false
---

```{r message=FALSE}
library(tidyverse)
```

# Learning goals

After this lesson, you should be able to:

- Use the `across()` function
    - Compare `across()` to an approach with `pivot_longer()` and `pivot_wider()`
- Write a `for` loop in R to handle repeated tasks
- Use the `map()` family of functions in the `purrr` package to handle repeated tasks

<!--
- Explain the difference between a list and an atomic vector in terms of how subsetting works. Subset lists and atomic vectors by name and by index.
-->

<br>

You can download a template Quarto file to start from [here](activity_templates/09-iteration.qmd). Save this template within the following directory structure:

- `your_course_folder`
    - `iteration`
        - `code`
            - `09-iteration.qmd`


<br><br><br>


# Iteration across data frame columns with `across()`

Often we will have to perform the same data wrangling on many variables (e.g., rounding numbers)

```{r}
diamonds %>%
    mutate(
        carat = round(carat, 1),
        x = round(x, 1),
        y = round(y, 1),
        z = round(z, 1)
    )
```

`dplyr` provides the `across()` function for performing these repeated function calls:

```{r}
# Option 1: Create our own named function
round_to_one <- function(x) {
    round(x, digits = 1)
}
diamonds %>% 
    mutate(across(.cols = c(carat, x, y, z), .fns = round_to_one))

# Option 2: Use an "anonymous" or "lambda" function that isn't named
diamonds %>% 
    mutate(across(.cols = c(carat, x, y, z), .fns = function(x) {round(x, digits = 1)} ))
```

When we look at the documentation for `across()`, we see that the `.cols` argument specifies which variables we want to transform, and it has a `<tidy-select>` tag. This means that the syntax we use for `.cols` follows certain rules. Let's click this link to explore the possibilities for selecting variables.

- Read through the "Overview of selection features" section to get an overall sense of the many ways to select variables.
- Navigate back to the `across()` documentation and read through the Examples section at the bottom. Click the "Run examples" link to view the output for all of the examples.


**Exercise:** Using the `diamonds` dataset:

1. Transform the `x`, `y`, and `z` columns so that the units of millimeters are displayed (e.g., "4.0 mm").
2. Convert all numeric columns into character columns.
    - Hint: type `is.` and hit Tab in the Console. Scroll through the function options. Do the same with `as.`
    
Pick one of the two tasks above--how could you do this with a `pivot_longer()` and then a `pivot_wider()`?

----------

What if we wanted to perform multiple transformations on each of many variables? 

Within the different values of diamond `cut`, let's summarize the mean, median, and standard deviation of the numeric variables. When we look at the `.fns` argument in the `across()` documentation, we see that we can provide a **list** of functions:

```{r}
diamonds %>%
    group_by(cut) %>% 
    summarize(across(.cols = where(is.numeric), .fns = list(mean = mean, med = median, sd = sd)))
```

What does the list of functions look like? What is the structure of this list object?

```{r}
list_of_fcts <- list(mean = mean, med = median, sd = sd)
list_of_fcts
str(list_of_fcts)
```

We'll be working more with lists in upcoming lessons.


# Case study: performing many different versions of an analysis

My number 1 use case for writing functions and iteration/looping is to perform some exploration or modeling repeatedly for different "tweaked" versions. For example, our broad goal might be to fit a linear regression model to our data. However, there are often multiple choices that we have to make in practice:

- Keep missing values or fill them in (imputation)? (We'll talk about missing data and imputation after Fall Break.)
- Fit the model only on a certain group of cases?
- Filter out outliers in one or more variables?
- Transform certain variables? (e.g., log transformation)

We can map these choices to **arguments** in a custom model-fitting function:

- `impute`: TRUE or FALSE
- `filter_to`: This could be a set of string descriptions: "All cases", "Group 1", "Groups 1 and 2"
- `remove_outliers`: TRUE or FALSE
- `outlier_sd_thresh`: Cases that are more than this number of SDs away from the mean will be considered outliers and excluded

The `tidyr` package has a useful function called `crossing()` that is useful for generating argument combinations. For each argument, we specify all possible values for that argument. `crossing()` generates all combinations.

```{r}
df_arg_combos <- crossing(
    impute = c(TRUE, FALSE),
    filter_to = c("All cases", "Group 1", "Groups 1 and 2"),
    remove_outliers = c(TRUE, FALSE)
)
df_arg_combos
```

A function that implements the analysis and allows for variation in these choices:

```{r}
fit_model <- function(df, impute, filter_to, remove_outliers) {
    if (impute) {
        df <- some_imputation_function(df)
    }
    
    if (filter_to=="Group 1") {
        df <- df %>% 
            filter(group==1)
    } else if (filter_to=="Groups 1 and 2") {
        df <- df %>% 
            filter(group %in% c(1,2))
    }
    
    if (remove_outliers) {
        df <- function_for_removing_outliers(df)
    }
    
    lm(y ~ x1 + x2, data = df)
}
```

But how can we iterate the `fit_model()` function over the combinations in `df_arg_combos`? We have two good options in R:

- `for` loops
- The `purrr` package (in the `tidyverse`) (general purpose functions for iterating other functions)

## `for` loops

```{r}
for (i in 1:10) {
    print(i)
}
```

The following `for` loops all have the same behavior.

We don't have to use a numerical indexing variable to iterate:

```{r}
groups <- c("group1", "group2", "group3")
for (g in groups) {
    print(g)
}
```

The single square brackets `[i]` get the `i`th element of a vector.

```{r}
for (i in 1:3) {
    print(groups[i])
}
```

The `seq_along()` function generates an integer sequence from 1 to the length of the vector supplied. A nice feature of `seq_along()` is that it generates an empty iteration vector if the vector you're iterating over itself has length 0.

```{r}
seq_along(groups)
no_groups <- c()
seq_along(no_groups)

for (i in seq_along(groups)) {
    print(groups[i])
}
```

Often we'll want to store output created during a `for` loop. Let's see how we can fit linear regression models to subsets of data and store the results.

```{r}
data(diamonds)

# Fit models of price vs. carat separately for each value of cut
unique_cuts <- diamonds %>% pull(cut) %>% levels()
lin_mod_results <- vector(mode = "list", length = length(unique_cuts))

for (i in seq_along(unique_cuts)) {
    this_cut <- unique_cuts[i]
    diamonds_sub <- diamonds %>%
        filter(cut==this_cut)
    # The double square brackets [[i]] accesses the ith element of a list
    lin_mod_results[[i]] <- lm(price ~ carat, data = diamonds_sub)
}
```

## `purrr`

The `purrr` package contains general purpose functions for iteration. Let's take a look the [function reference](https://purrr.tidyverse.org/reference/index.html).

The `map()` family of functions applies a given function (`f` in the image below) to each of the elements of a vector or list.

![](https://d33wubrfki0l68.cloudfront.net/12f6af8404d9723dff9cc665028a35f07759299d/d0d9a/diagrams/functionals/map-list.png){fig-align="center"}

- `map()` returns a list
- `map_chr()` returns a character vector
- `map_lgl()` returns a logical vector
- `map_int()` returns an integer vector
- `map_dbl()` returns a numeric vector
- `map_vec()` returns a vector of a different (non-atomic) type (like dates)

`purrr` also offers the `pmap()` family of functions that take multiple inputs and loops over them simultaneously:

![](https://d33wubrfki0l68.cloudfront.net/e698354d802ce16f83546db63c45a19b8d51f45e/43de7/diagrams/functionals/pmap-3.png){fig-align="center"}

```{r}
df <- tibble(
    string = c("apple", "banana", "cherry"),
    pattern = c("p", "n", "h"),
    replacement = c("P", "N", "H")
)

pmap(df, str_replace_all)
pmap_chr(df, str_replace_all)
```

**Exercise:** Create your own small examples that show how `pmap` works with `str_remove()` and `str_sub`.


## Application exercise

**Goal:** In the `diamonds` dataset, we want to understand the relationship between `price` and size (`carat`). We want to explore variation along two choices:

1. The variables included in the model. We'll explore 3 sets of variables:
    - No further variables (just `price` and `carat`)
    - Adjusting for `cut`
    - Adjusting for `cut` and `clarity`
    - Adjusting for `cut`, `clarity`, and `color`
2. Whether or not to remove outliers in the `carat` variable. We'll define outliers as cases whose `carat` is over 3 SDs away from the mean.


**Exercise 1:** Use `crossing()` to create the data frame of argument combinations for our analyses. Note that you can create a list of **formula** objects in R with `c(y ~ x1, y ~ x1 + x2)`.

<details>
  <summary>Solution</summary>
  
```{r}
df_arg_combos <- crossing(
    mod_formula = c(price ~ carat, price ~ carat + cut,  price ~ carat + cut + clarity,  price ~ carat + cut + clarity + color),
    remove_outliers = c(TRUE, FALSE)
)
df_arg_combos
```

</details>

**Exercise 2:** Write a function that removes outliers in a dataset. The user should be able to supply the dataset, the variable to remove outliers in, and a threshold on the number of SDs away from the mean used to define outliers.

<details>
  <summary>Solution</summary>
  
```{r}
remove_outliers <- function(df, what_var, sd_thresh) {
    df %>% 
        mutate(zscore = ({{ what_var }} - mean({{ what_var}}, na.rm = TRUE))/sd({{ what_var }}, na.rm = TRUE)) %>%
        filter(zscore <= sd_thresh)
}
```

</details>

**Exercise 3:** Write a function that implements the analysis versions specifically for the `diamonds` dataset. The user will not specify the dataset as an argument but will input the model formula and whether or not to remove outliers (cases whose `carat` is over 3 SDs away from the mean).

<details>
  <summary>Solution</summary>
  
```{r}
fit_model <- function(mod_formula, remove_outliers) {
    if (remove_outliers) {
        diamonds_clean <- remove_outliers(diamonds, what_var = carat, sd_thresh = 3)
    } else {
        diamonds_clean <- diamonds
    }
    
    lm(mod_formula, data = diamonds_clean)
}
```

</details>

**Exercise 4:** Write a `for` loop that stores the fitted linear models from all versions of the analysis.

Note that you can pull out the contents of a single data frame column in many ways. For a data frame `df` with a variable named `x`:

- `df$x`
- `df %>% pull(x)`
- `df[["x"]]`

<details>
  <summary>Solution</summary>
  
```{r}
lin_mod_res_for <- vector(mode = "list", length = nrow(df_arg_combos))

for (i in seq_along(lin_mod_res_for)) {
    this_formula <- df_arg_combos$mod_formula[[i]] # Double [[ for the **list** of formulas
    this_remove_outliers <- df_arg_combos$remove_outliers[i] # Single [ for the **atomic vector** of logicals
    lin_mod_res_for[[i]] <- fit_model(
        mod_formula = this_formula,
        remove_outliers = this_remove_outliers
    )
}
```

</details>

**Exercise 5:** Use `pmap()` from `purrr` to replicate what you did with the `for` loop.

<details>
  <summary>Solution</summary>
  
```{r}
lin_mod_res_pmap <- pmap(df_arg_combos, fit_model)
```

</details>



::: {.callout-tip title="Stop to reflect"}
What was challenging about this application exercise? What felt comfortable? What insights did you gain from collaborating with others? What ideas/strategies do you want to remember going forward?
:::


<!--

```{r}
fit_model <- function(df, mod_formula, remove_outliers) {
    if (remove_outliers) {
        df <- remove_outliers(df, what_var = carat, sd_thresh = 3)
    }
    
    lm(mod_formula, data = df)
}

res <- pmap(df_arg_combos, function(remove_outliers, mod_formula) {fit_model(df = diamonds, mod_formula = mod_formula, remove_outliers = remove_outliers)} )
```

```{r}
fit_model <- function(mod_formula, remove_outliers) {
    if (remove_outliers) {
        diamonds_clean <- remove_outliers(diamonds, what_var = carat, sd_thresh = 3)
    } else {
        diamonds_clean <- diamonds
    }
    
    lm(mod_formula, data = diamonds_clean)
}

res <- pmap(df_arg_combos, fit_model)
```

-->


<!--
# Homework

Have students go from gap_nested -> gap_simple and gap_split -> gap_simple

-->
